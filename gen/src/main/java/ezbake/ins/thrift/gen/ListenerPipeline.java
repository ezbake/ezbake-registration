/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.ins.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ListenerPipeline implements org.apache.thrift.TBase<ListenerPipeline, ListenerPipeline._Fields>, java.io.Serializable, Cloneable, Comparable<ListenerPipeline> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ListenerPipeline");

  private static final org.apache.thrift.protocol.TField FEED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("feedName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField LISTENING_TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("listeningTopics", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField BROADCAST_TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("broadcastTopics", org.apache.thrift.protocol.TType.SET, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ListenerPipelineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ListenerPipelineTupleSchemeFactory());
  }

  public String feedName; // optional
  public String description; // optional
  public Set<String> listeningTopics; // optional
  public Set<BroadcastTopic> broadcastTopics; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FEED_NAME((short)1, "feedName"),
    DESCRIPTION((short)2, "description"),
    LISTENING_TOPICS((short)3, "listeningTopics"),
    BROADCAST_TOPICS((short)4, "broadcastTopics");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEED_NAME
          return FEED_NAME;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // LISTENING_TOPICS
          return LISTENING_TOPICS;
        case 4: // BROADCAST_TOPICS
          return BROADCAST_TOPICS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FEED_NAME,_Fields.DESCRIPTION,_Fields.LISTENING_TOPICS,_Fields.BROADCAST_TOPICS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEED_NAME, new org.apache.thrift.meta_data.FieldMetaData("feedName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LISTENING_TOPICS, new org.apache.thrift.meta_data.FieldMetaData("listeningTopics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.BROADCAST_TOPICS, new org.apache.thrift.meta_data.FieldMetaData("broadcastTopics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BroadcastTopic.class))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ListenerPipeline.class, metaDataMap);
  }

  public ListenerPipeline() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ListenerPipeline(ListenerPipeline other) {
    if (other.isSetFeedName()) {
      this.feedName = other.feedName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetListeningTopics()) {
      Set<String> __this__listeningTopics = new HashSet<String>(other.listeningTopics);
      this.listeningTopics = __this__listeningTopics;
    }
    if (other.isSetBroadcastTopics()) {
      Set<BroadcastTopic> __this__broadcastTopics = new HashSet<BroadcastTopic>(other.broadcastTopics.size());
      for (BroadcastTopic other_element : other.broadcastTopics) {
        __this__broadcastTopics.add(new BroadcastTopic(other_element));
      }
      this.broadcastTopics = __this__broadcastTopics;
    }
  }

  public ListenerPipeline deepCopy() {
    return new ListenerPipeline(this);
  }

  @Override
  public void clear() {
    this.feedName = null;
    this.description = null;
    this.listeningTopics = null;
    this.broadcastTopics = null;
  }

  public String getFeedName() {
    return this.feedName;
  }

  public ListenerPipeline setFeedName(String feedName) {
    this.feedName = feedName;
    return this;
  }

  public void unsetFeedName() {
    this.feedName = null;
  }

  /** Returns true if field feedName is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedName() {
    return this.feedName != null;
  }

  public void setFeedNameIsSet(boolean value) {
    if (!value) {
      this.feedName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public ListenerPipeline setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getListeningTopicsSize() {
    return (this.listeningTopics == null) ? 0 : this.listeningTopics.size();
  }

  public java.util.Iterator<String> getListeningTopicsIterator() {
    return (this.listeningTopics == null) ? null : this.listeningTopics.iterator();
  }

  public void addToListeningTopics(String elem) {
    if (this.listeningTopics == null) {
      this.listeningTopics = new HashSet<String>();
    }
    this.listeningTopics.add(elem);
  }

  public Set<String> getListeningTopics() {
    return this.listeningTopics;
  }

  public ListenerPipeline setListeningTopics(Set<String> listeningTopics) {
    this.listeningTopics = listeningTopics;
    return this;
  }

  public void unsetListeningTopics() {
    this.listeningTopics = null;
  }

  /** Returns true if field listeningTopics is set (has been assigned a value) and false otherwise */
  public boolean isSetListeningTopics() {
    return this.listeningTopics != null;
  }

  public void setListeningTopicsIsSet(boolean value) {
    if (!value) {
      this.listeningTopics = null;
    }
  }

  public int getBroadcastTopicsSize() {
    return (this.broadcastTopics == null) ? 0 : this.broadcastTopics.size();
  }

  public java.util.Iterator<BroadcastTopic> getBroadcastTopicsIterator() {
    return (this.broadcastTopics == null) ? null : this.broadcastTopics.iterator();
  }

  public void addToBroadcastTopics(BroadcastTopic elem) {
    if (this.broadcastTopics == null) {
      this.broadcastTopics = new HashSet<BroadcastTopic>();
    }
    this.broadcastTopics.add(elem);
  }

  public Set<BroadcastTopic> getBroadcastTopics() {
    return this.broadcastTopics;
  }

  public ListenerPipeline setBroadcastTopics(Set<BroadcastTopic> broadcastTopics) {
    this.broadcastTopics = broadcastTopics;
    return this;
  }

  public void unsetBroadcastTopics() {
    this.broadcastTopics = null;
  }

  /** Returns true if field broadcastTopics is set (has been assigned a value) and false otherwise */
  public boolean isSetBroadcastTopics() {
    return this.broadcastTopics != null;
  }

  public void setBroadcastTopicsIsSet(boolean value) {
    if (!value) {
      this.broadcastTopics = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FEED_NAME:
      if (value == null) {
        unsetFeedName();
      } else {
        setFeedName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case LISTENING_TOPICS:
      if (value == null) {
        unsetListeningTopics();
      } else {
        setListeningTopics((Set<String>)value);
      }
      break;

    case BROADCAST_TOPICS:
      if (value == null) {
        unsetBroadcastTopics();
      } else {
        setBroadcastTopics((Set<BroadcastTopic>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FEED_NAME:
      return getFeedName();

    case DESCRIPTION:
      return getDescription();

    case LISTENING_TOPICS:
      return getListeningTopics();

    case BROADCAST_TOPICS:
      return getBroadcastTopics();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FEED_NAME:
      return isSetFeedName();
    case DESCRIPTION:
      return isSetDescription();
    case LISTENING_TOPICS:
      return isSetListeningTopics();
    case BROADCAST_TOPICS:
      return isSetBroadcastTopics();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ListenerPipeline)
      return this.equals((ListenerPipeline)that);
    return false;
  }

  public boolean equals(ListenerPipeline that) {
    if (that == null)
      return false;

    boolean this_present_feedName = true && this.isSetFeedName();
    boolean that_present_feedName = true && that.isSetFeedName();
    if (this_present_feedName || that_present_feedName) {
      if (!(this_present_feedName && that_present_feedName))
        return false;
      if (!this.feedName.equals(that.feedName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_listeningTopics = true && this.isSetListeningTopics();
    boolean that_present_listeningTopics = true && that.isSetListeningTopics();
    if (this_present_listeningTopics || that_present_listeningTopics) {
      if (!(this_present_listeningTopics && that_present_listeningTopics))
        return false;
      if (!this.listeningTopics.equals(that.listeningTopics))
        return false;
    }

    boolean this_present_broadcastTopics = true && this.isSetBroadcastTopics();
    boolean that_present_broadcastTopics = true && that.isSetBroadcastTopics();
    if (this_present_broadcastTopics || that_present_broadcastTopics) {
      if (!(this_present_broadcastTopics && that_present_broadcastTopics))
        return false;
      if (!this.broadcastTopics.equals(that.broadcastTopics))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ListenerPipeline other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFeedName()).compareTo(other.isSetFeedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedName, other.feedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetListeningTopics()).compareTo(other.isSetListeningTopics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetListeningTopics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.listeningTopics, other.listeningTopics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBroadcastTopics()).compareTo(other.isSetBroadcastTopics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroadcastTopics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broadcastTopics, other.broadcastTopics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ListenerPipeline(");
    boolean first = true;

    if (isSetFeedName()) {
      sb.append("feedName:");
      if (this.feedName == null) {
        sb.append("null");
      } else {
        sb.append(this.feedName);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetListeningTopics()) {
      if (!first) sb.append(", ");
      sb.append("listeningTopics:");
      if (this.listeningTopics == null) {
        sb.append("null");
      } else {
        sb.append(this.listeningTopics);
      }
      first = false;
    }
    if (isSetBroadcastTopics()) {
      if (!first) sb.append(", ");
      sb.append("broadcastTopics:");
      if (this.broadcastTopics == null) {
        sb.append("null");
      } else {
        sb.append(this.broadcastTopics);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ListenerPipelineStandardSchemeFactory implements SchemeFactory {
    public ListenerPipelineStandardScheme getScheme() {
      return new ListenerPipelineStandardScheme();
    }
  }

  private static class ListenerPipelineStandardScheme extends StandardScheme<ListenerPipeline> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ListenerPipeline struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feedName = iprot.readString();
              struct.setFeedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LISTENING_TOPICS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set16 = iprot.readSetBegin();
                struct.listeningTopics = new HashSet<String>(2*_set16.size);
                for (int _i17 = 0; _i17 < _set16.size; ++_i17)
                {
                  String _elem18;
                  _elem18 = iprot.readString();
                  struct.listeningTopics.add(_elem18);
                }
                iprot.readSetEnd();
              }
              struct.setListeningTopicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // BROADCAST_TOPICS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set19 = iprot.readSetBegin();
                struct.broadcastTopics = new HashSet<BroadcastTopic>(2*_set19.size);
                for (int _i20 = 0; _i20 < _set19.size; ++_i20)
                {
                  BroadcastTopic _elem21;
                  _elem21 = new BroadcastTopic();
                  _elem21.read(iprot);
                  struct.broadcastTopics.add(_elem21);
                }
                iprot.readSetEnd();
              }
              struct.setBroadcastTopicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ListenerPipeline struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.feedName != null) {
        if (struct.isSetFeedName()) {
          oprot.writeFieldBegin(FEED_NAME_FIELD_DESC);
          oprot.writeString(struct.feedName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.listeningTopics != null) {
        if (struct.isSetListeningTopics()) {
          oprot.writeFieldBegin(LISTENING_TOPICS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.listeningTopics.size()));
            for (String _iter22 : struct.listeningTopics)
            {
              oprot.writeString(_iter22);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.broadcastTopics != null) {
        if (struct.isSetBroadcastTopics()) {
          oprot.writeFieldBegin(BROADCAST_TOPICS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.broadcastTopics.size()));
            for (BroadcastTopic _iter23 : struct.broadcastTopics)
            {
              _iter23.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ListenerPipelineTupleSchemeFactory implements SchemeFactory {
    public ListenerPipelineTupleScheme getScheme() {
      return new ListenerPipelineTupleScheme();
    }
  }

  private static class ListenerPipelineTupleScheme extends TupleScheme<ListenerPipeline> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ListenerPipeline struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFeedName()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetListeningTopics()) {
        optionals.set(2);
      }
      if (struct.isSetBroadcastTopics()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetFeedName()) {
        oprot.writeString(struct.feedName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetListeningTopics()) {
        {
          oprot.writeI32(struct.listeningTopics.size());
          for (String _iter24 : struct.listeningTopics)
          {
            oprot.writeString(_iter24);
          }
        }
      }
      if (struct.isSetBroadcastTopics()) {
        {
          oprot.writeI32(struct.broadcastTopics.size());
          for (BroadcastTopic _iter25 : struct.broadcastTopics)
          {
            _iter25.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ListenerPipeline struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.feedName = iprot.readString();
        struct.setFeedNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set26 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.listeningTopics = new HashSet<String>(2*_set26.size);
          for (int _i27 = 0; _i27 < _set26.size; ++_i27)
          {
            String _elem28;
            _elem28 = iprot.readString();
            struct.listeningTopics.add(_elem28);
          }
        }
        struct.setListeningTopicsIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set29 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.broadcastTopics = new HashSet<BroadcastTopic>(2*_set29.size);
          for (int _i30 = 0; _i30 < _set29.size; ++_i30)
          {
            BroadcastTopic _elem31;
            _elem31 = new BroadcastTopic();
            _elem31.read(iprot);
            struct.broadcastTopics.add(_elem31);
          }
        }
        struct.setBroadcastTopicsIsSet(true);
      }
    }
  }

}

