/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.ins.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class JobRegistration implements org.apache.thrift.TBase<JobRegistration, JobRegistration._Fields>, java.io.Serializable, Cloneable, Comparable<JobRegistration> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("JobRegistration");

  private static final org.apache.thrift.protocol.TField JOB_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("jobName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FEED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("feedName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField URI_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("uriPrefix", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new JobRegistrationStandardSchemeFactory());
    schemes.put(TupleScheme.class, new JobRegistrationTupleSchemeFactory());
  }

  public String jobName; // optional
  public String feedName; // optional
  public String uriPrefix; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    JOB_NAME((short)1, "jobName"),
    FEED_NAME((short)2, "feedName"),
    URI_PREFIX((short)3, "uriPrefix");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // JOB_NAME
          return JOB_NAME;
        case 2: // FEED_NAME
          return FEED_NAME;
        case 3: // URI_PREFIX
          return URI_PREFIX;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.JOB_NAME,_Fields.FEED_NAME,_Fields.URI_PREFIX};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.JOB_NAME, new org.apache.thrift.meta_data.FieldMetaData("jobName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FEED_NAME, new org.apache.thrift.meta_data.FieldMetaData("feedName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.URI_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("uriPrefix", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(JobRegistration.class, metaDataMap);
  }

  public JobRegistration() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public JobRegistration(JobRegistration other) {
    if (other.isSetJobName()) {
      this.jobName = other.jobName;
    }
    if (other.isSetFeedName()) {
      this.feedName = other.feedName;
    }
    if (other.isSetUriPrefix()) {
      this.uriPrefix = other.uriPrefix;
    }
  }

  public JobRegistration deepCopy() {
    return new JobRegistration(this);
  }

  @Override
  public void clear() {
    this.jobName = null;
    this.feedName = null;
    this.uriPrefix = null;
  }

  public String getJobName() {
    return this.jobName;
  }

  public JobRegistration setJobName(String jobName) {
    this.jobName = jobName;
    return this;
  }

  public void unsetJobName() {
    this.jobName = null;
  }

  /** Returns true if field jobName is set (has been assigned a value) and false otherwise */
  public boolean isSetJobName() {
    return this.jobName != null;
  }

  public void setJobNameIsSet(boolean value) {
    if (!value) {
      this.jobName = null;
    }
  }

  public String getFeedName() {
    return this.feedName;
  }

  public JobRegistration setFeedName(String feedName) {
    this.feedName = feedName;
    return this;
  }

  public void unsetFeedName() {
    this.feedName = null;
  }

  /** Returns true if field feedName is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedName() {
    return this.feedName != null;
  }

  public void setFeedNameIsSet(boolean value) {
    if (!value) {
      this.feedName = null;
    }
  }

  public String getUriPrefix() {
    return this.uriPrefix;
  }

  public JobRegistration setUriPrefix(String uriPrefix) {
    this.uriPrefix = uriPrefix;
    return this;
  }

  public void unsetUriPrefix() {
    this.uriPrefix = null;
  }

  /** Returns true if field uriPrefix is set (has been assigned a value) and false otherwise */
  public boolean isSetUriPrefix() {
    return this.uriPrefix != null;
  }

  public void setUriPrefixIsSet(boolean value) {
    if (!value) {
      this.uriPrefix = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case JOB_NAME:
      if (value == null) {
        unsetJobName();
      } else {
        setJobName((String)value);
      }
      break;

    case FEED_NAME:
      if (value == null) {
        unsetFeedName();
      } else {
        setFeedName((String)value);
      }
      break;

    case URI_PREFIX:
      if (value == null) {
        unsetUriPrefix();
      } else {
        setUriPrefix((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case JOB_NAME:
      return getJobName();

    case FEED_NAME:
      return getFeedName();

    case URI_PREFIX:
      return getUriPrefix();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case JOB_NAME:
      return isSetJobName();
    case FEED_NAME:
      return isSetFeedName();
    case URI_PREFIX:
      return isSetUriPrefix();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof JobRegistration)
      return this.equals((JobRegistration)that);
    return false;
  }

  public boolean equals(JobRegistration that) {
    if (that == null)
      return false;

    boolean this_present_jobName = true && this.isSetJobName();
    boolean that_present_jobName = true && that.isSetJobName();
    if (this_present_jobName || that_present_jobName) {
      if (!(this_present_jobName && that_present_jobName))
        return false;
      if (!this.jobName.equals(that.jobName))
        return false;
    }

    boolean this_present_feedName = true && this.isSetFeedName();
    boolean that_present_feedName = true && that.isSetFeedName();
    if (this_present_feedName || that_present_feedName) {
      if (!(this_present_feedName && that_present_feedName))
        return false;
      if (!this.feedName.equals(that.feedName))
        return false;
    }

    boolean this_present_uriPrefix = true && this.isSetUriPrefix();
    boolean that_present_uriPrefix = true && that.isSetUriPrefix();
    if (this_present_uriPrefix || that_present_uriPrefix) {
      if (!(this_present_uriPrefix && that_present_uriPrefix))
        return false;
      if (!this.uriPrefix.equals(that.uriPrefix))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(JobRegistration other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetJobName()).compareTo(other.isSetJobName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetJobName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jobName, other.jobName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFeedName()).compareTo(other.isSetFeedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedName, other.feedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetUriPrefix()).compareTo(other.isSetUriPrefix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUriPrefix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uriPrefix, other.uriPrefix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("JobRegistration(");
    boolean first = true;

    if (isSetJobName()) {
      sb.append("jobName:");
      if (this.jobName == null) {
        sb.append("null");
      } else {
        sb.append(this.jobName);
      }
      first = false;
    }
    if (isSetFeedName()) {
      if (!first) sb.append(", ");
      sb.append("feedName:");
      if (this.feedName == null) {
        sb.append("null");
      } else {
        sb.append(this.feedName);
      }
      first = false;
    }
    if (isSetUriPrefix()) {
      if (!first) sb.append(", ");
      sb.append("uriPrefix:");
      if (this.uriPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.uriPrefix);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class JobRegistrationStandardSchemeFactory implements SchemeFactory {
    public JobRegistrationStandardScheme getScheme() {
      return new JobRegistrationStandardScheme();
    }
  }

  private static class JobRegistrationStandardScheme extends StandardScheme<JobRegistration> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, JobRegistration struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // JOB_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.jobName = iprot.readString();
              struct.setJobNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FEED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feedName = iprot.readString();
              struct.setFeedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // URI_PREFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uriPrefix = iprot.readString();
              struct.setUriPrefixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, JobRegistration struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.jobName != null) {
        if (struct.isSetJobName()) {
          oprot.writeFieldBegin(JOB_NAME_FIELD_DESC);
          oprot.writeString(struct.jobName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.feedName != null) {
        if (struct.isSetFeedName()) {
          oprot.writeFieldBegin(FEED_NAME_FIELD_DESC);
          oprot.writeString(struct.feedName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uriPrefix != null) {
        if (struct.isSetUriPrefix()) {
          oprot.writeFieldBegin(URI_PREFIX_FIELD_DESC);
          oprot.writeString(struct.uriPrefix);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class JobRegistrationTupleSchemeFactory implements SchemeFactory {
    public JobRegistrationTupleScheme getScheme() {
      return new JobRegistrationTupleScheme();
    }
  }

  private static class JobRegistrationTupleScheme extends TupleScheme<JobRegistration> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, JobRegistration struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetJobName()) {
        optionals.set(0);
      }
      if (struct.isSetFeedName()) {
        optionals.set(1);
      }
      if (struct.isSetUriPrefix()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetJobName()) {
        oprot.writeString(struct.jobName);
      }
      if (struct.isSetFeedName()) {
        oprot.writeString(struct.feedName);
      }
      if (struct.isSetUriPrefix()) {
        oprot.writeString(struct.uriPrefix);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, JobRegistration struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.jobName = iprot.readString();
        struct.setJobNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.feedName = iprot.readString();
        struct.setFeedNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.uriPrefix = iprot.readString();
        struct.setUriPrefixIsSet(true);
      }
    }
  }

}

