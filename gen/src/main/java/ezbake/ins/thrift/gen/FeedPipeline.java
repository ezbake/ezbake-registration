/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.ins.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class FeedPipeline implements org.apache.thrift.TBase<FeedPipeline, FeedPipeline._Fields>, java.io.Serializable, Cloneable, Comparable<FeedPipeline> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("FeedPipeline");

  private static final org.apache.thrift.protocol.TField FEED_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("feedName", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField BROADCAST_TOPICS_FIELD_DESC = new org.apache.thrift.protocol.TField("broadcastTopics", org.apache.thrift.protocol.TType.SET, (short)3);
  private static final org.apache.thrift.protocol.TField EXPORTING_SYSTEM_FIELD_DESC = new org.apache.thrift.protocol.TField("exportingSystem", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_CLASSIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("maxClassification", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField NETWORK_INITIATED_FIELD_DESC = new org.apache.thrift.protocol.TField("networkInitiated", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PHYSICAL_SERVERS_FIELD_DESC = new org.apache.thrift.protocol.TField("physicalServers", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DATE_ADDED_FIELD_DESC = new org.apache.thrift.protocol.TField("dateAdded", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DATA_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("dataType", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new FeedPipelineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new FeedPipelineTupleSchemeFactory());
  }

  public String feedName; // optional
  public String description; // optional
  public Set<BroadcastTopic> broadcastTopics; // optional
  public String exportingSystem; // optional
  public String type; // optional
  public String maxClassification; // optional
  public String networkInitiated; // optional
  public List<String> physicalServers; // optional
  public String dateAdded; // optional
  public String dataType; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    FEED_NAME((short)1, "feedName"),
    DESCRIPTION((short)2, "description"),
    BROADCAST_TOPICS((short)3, "broadcastTopics"),
    EXPORTING_SYSTEM((short)4, "exportingSystem"),
    TYPE((short)5, "type"),
    MAX_CLASSIFICATION((short)6, "maxClassification"),
    NETWORK_INITIATED((short)7, "networkInitiated"),
    PHYSICAL_SERVERS((short)8, "physicalServers"),
    DATE_ADDED((short)9, "dateAdded"),
    DATA_TYPE((short)10, "dataType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // FEED_NAME
          return FEED_NAME;
        case 2: // DESCRIPTION
          return DESCRIPTION;
        case 3: // BROADCAST_TOPICS
          return BROADCAST_TOPICS;
        case 4: // EXPORTING_SYSTEM
          return EXPORTING_SYSTEM;
        case 5: // TYPE
          return TYPE;
        case 6: // MAX_CLASSIFICATION
          return MAX_CLASSIFICATION;
        case 7: // NETWORK_INITIATED
          return NETWORK_INITIATED;
        case 8: // PHYSICAL_SERVERS
          return PHYSICAL_SERVERS;
        case 9: // DATE_ADDED
          return DATE_ADDED;
        case 10: // DATA_TYPE
          return DATA_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.FEED_NAME,_Fields.DESCRIPTION,_Fields.BROADCAST_TOPICS,_Fields.EXPORTING_SYSTEM,_Fields.TYPE,_Fields.MAX_CLASSIFICATION,_Fields.NETWORK_INITIATED,_Fields.PHYSICAL_SERVERS,_Fields.DATE_ADDED,_Fields.DATA_TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.FEED_NAME, new org.apache.thrift.meta_data.FieldMetaData("feedName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BROADCAST_TOPICS, new org.apache.thrift.meta_data.FieldMetaData("broadcastTopics", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, BroadcastTopic.class))));
    tmpMap.put(_Fields.EXPORTING_SYSTEM, new org.apache.thrift.meta_data.FieldMetaData("exportingSystem", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAX_CLASSIFICATION, new org.apache.thrift.meta_data.FieldMetaData("maxClassification", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NETWORK_INITIATED, new org.apache.thrift.meta_data.FieldMetaData("networkInitiated", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHYSICAL_SERVERS, new org.apache.thrift.meta_data.FieldMetaData("physicalServers", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.DATE_ADDED, new org.apache.thrift.meta_data.FieldMetaData("dateAdded", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_TYPE, new org.apache.thrift.meta_data.FieldMetaData("dataType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(FeedPipeline.class, metaDataMap);
  }

  public FeedPipeline() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public FeedPipeline(FeedPipeline other) {
    if (other.isSetFeedName()) {
      this.feedName = other.feedName;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    if (other.isSetBroadcastTopics()) {
      Set<BroadcastTopic> __this__broadcastTopics = new HashSet<BroadcastTopic>(other.broadcastTopics.size());
      for (BroadcastTopic other_element : other.broadcastTopics) {
        __this__broadcastTopics.add(new BroadcastTopic(other_element));
      }
      this.broadcastTopics = __this__broadcastTopics;
    }
    if (other.isSetExportingSystem()) {
      this.exportingSystem = other.exportingSystem;
    }
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetMaxClassification()) {
      this.maxClassification = other.maxClassification;
    }
    if (other.isSetNetworkInitiated()) {
      this.networkInitiated = other.networkInitiated;
    }
    if (other.isSetPhysicalServers()) {
      List<String> __this__physicalServers = new ArrayList<String>(other.physicalServers);
      this.physicalServers = __this__physicalServers;
    }
    if (other.isSetDateAdded()) {
      this.dateAdded = other.dateAdded;
    }
    if (other.isSetDataType()) {
      this.dataType = other.dataType;
    }
  }

  public FeedPipeline deepCopy() {
    return new FeedPipeline(this);
  }

  @Override
  public void clear() {
    this.feedName = null;
    this.description = null;
    this.broadcastTopics = null;
    this.exportingSystem = null;
    this.type = null;
    this.maxClassification = null;
    this.networkInitiated = null;
    this.physicalServers = null;
    this.dateAdded = null;
    this.dataType = null;
  }

  public String getFeedName() {
    return this.feedName;
  }

  public FeedPipeline setFeedName(String feedName) {
    this.feedName = feedName;
    return this;
  }

  public void unsetFeedName() {
    this.feedName = null;
  }

  /** Returns true if field feedName is set (has been assigned a value) and false otherwise */
  public boolean isSetFeedName() {
    return this.feedName != null;
  }

  public void setFeedNameIsSet(boolean value) {
    if (!value) {
      this.feedName = null;
    }
  }

  public String getDescription() {
    return this.description;
  }

  public FeedPipeline setDescription(String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public int getBroadcastTopicsSize() {
    return (this.broadcastTopics == null) ? 0 : this.broadcastTopics.size();
  }

  public java.util.Iterator<BroadcastTopic> getBroadcastTopicsIterator() {
    return (this.broadcastTopics == null) ? null : this.broadcastTopics.iterator();
  }

  public void addToBroadcastTopics(BroadcastTopic elem) {
    if (this.broadcastTopics == null) {
      this.broadcastTopics = new HashSet<BroadcastTopic>();
    }
    this.broadcastTopics.add(elem);
  }

  public Set<BroadcastTopic> getBroadcastTopics() {
    return this.broadcastTopics;
  }

  public FeedPipeline setBroadcastTopics(Set<BroadcastTopic> broadcastTopics) {
    this.broadcastTopics = broadcastTopics;
    return this;
  }

  public void unsetBroadcastTopics() {
    this.broadcastTopics = null;
  }

  /** Returns true if field broadcastTopics is set (has been assigned a value) and false otherwise */
  public boolean isSetBroadcastTopics() {
    return this.broadcastTopics != null;
  }

  public void setBroadcastTopicsIsSet(boolean value) {
    if (!value) {
      this.broadcastTopics = null;
    }
  }

  public String getExportingSystem() {
    return this.exportingSystem;
  }

  public FeedPipeline setExportingSystem(String exportingSystem) {
    this.exportingSystem = exportingSystem;
    return this;
  }

  public void unsetExportingSystem() {
    this.exportingSystem = null;
  }

  /** Returns true if field exportingSystem is set (has been assigned a value) and false otherwise */
  public boolean isSetExportingSystem() {
    return this.exportingSystem != null;
  }

  public void setExportingSystemIsSet(boolean value) {
    if (!value) {
      this.exportingSystem = null;
    }
  }

  public String getType() {
    return this.type;
  }

  public FeedPipeline setType(String type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public String getMaxClassification() {
    return this.maxClassification;
  }

  public FeedPipeline setMaxClassification(String maxClassification) {
    this.maxClassification = maxClassification;
    return this;
  }

  public void unsetMaxClassification() {
    this.maxClassification = null;
  }

  /** Returns true if field maxClassification is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxClassification() {
    return this.maxClassification != null;
  }

  public void setMaxClassificationIsSet(boolean value) {
    if (!value) {
      this.maxClassification = null;
    }
  }

  public String getNetworkInitiated() {
    return this.networkInitiated;
  }

  public FeedPipeline setNetworkInitiated(String networkInitiated) {
    this.networkInitiated = networkInitiated;
    return this;
  }

  public void unsetNetworkInitiated() {
    this.networkInitiated = null;
  }

  /** Returns true if field networkInitiated is set (has been assigned a value) and false otherwise */
  public boolean isSetNetworkInitiated() {
    return this.networkInitiated != null;
  }

  public void setNetworkInitiatedIsSet(boolean value) {
    if (!value) {
      this.networkInitiated = null;
    }
  }

  public int getPhysicalServersSize() {
    return (this.physicalServers == null) ? 0 : this.physicalServers.size();
  }

  public java.util.Iterator<String> getPhysicalServersIterator() {
    return (this.physicalServers == null) ? null : this.physicalServers.iterator();
  }

  public void addToPhysicalServers(String elem) {
    if (this.physicalServers == null) {
      this.physicalServers = new ArrayList<String>();
    }
    this.physicalServers.add(elem);
  }

  public List<String> getPhysicalServers() {
    return this.physicalServers;
  }

  public FeedPipeline setPhysicalServers(List<String> physicalServers) {
    this.physicalServers = physicalServers;
    return this;
  }

  public void unsetPhysicalServers() {
    this.physicalServers = null;
  }

  /** Returns true if field physicalServers is set (has been assigned a value) and false otherwise */
  public boolean isSetPhysicalServers() {
    return this.physicalServers != null;
  }

  public void setPhysicalServersIsSet(boolean value) {
    if (!value) {
      this.physicalServers = null;
    }
  }

  public String getDateAdded() {
    return this.dateAdded;
  }

  public FeedPipeline setDateAdded(String dateAdded) {
    this.dateAdded = dateAdded;
    return this;
  }

  public void unsetDateAdded() {
    this.dateAdded = null;
  }

  /** Returns true if field dateAdded is set (has been assigned a value) and false otherwise */
  public boolean isSetDateAdded() {
    return this.dateAdded != null;
  }

  public void setDateAddedIsSet(boolean value) {
    if (!value) {
      this.dateAdded = null;
    }
  }

  public String getDataType() {
    return this.dataType;
  }

  public FeedPipeline setDataType(String dataType) {
    this.dataType = dataType;
    return this;
  }

  public void unsetDataType() {
    this.dataType = null;
  }

  /** Returns true if field dataType is set (has been assigned a value) and false otherwise */
  public boolean isSetDataType() {
    return this.dataType != null;
  }

  public void setDataTypeIsSet(boolean value) {
    if (!value) {
      this.dataType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case FEED_NAME:
      if (value == null) {
        unsetFeedName();
      } else {
        setFeedName((String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((String)value);
      }
      break;

    case BROADCAST_TOPICS:
      if (value == null) {
        unsetBroadcastTopics();
      } else {
        setBroadcastTopics((Set<BroadcastTopic>)value);
      }
      break;

    case EXPORTING_SYSTEM:
      if (value == null) {
        unsetExportingSystem();
      } else {
        setExportingSystem((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((String)value);
      }
      break;

    case MAX_CLASSIFICATION:
      if (value == null) {
        unsetMaxClassification();
      } else {
        setMaxClassification((String)value);
      }
      break;

    case NETWORK_INITIATED:
      if (value == null) {
        unsetNetworkInitiated();
      } else {
        setNetworkInitiated((String)value);
      }
      break;

    case PHYSICAL_SERVERS:
      if (value == null) {
        unsetPhysicalServers();
      } else {
        setPhysicalServers((List<String>)value);
      }
      break;

    case DATE_ADDED:
      if (value == null) {
        unsetDateAdded();
      } else {
        setDateAdded((String)value);
      }
      break;

    case DATA_TYPE:
      if (value == null) {
        unsetDataType();
      } else {
        setDataType((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case FEED_NAME:
      return getFeedName();

    case DESCRIPTION:
      return getDescription();

    case BROADCAST_TOPICS:
      return getBroadcastTopics();

    case EXPORTING_SYSTEM:
      return getExportingSystem();

    case TYPE:
      return getType();

    case MAX_CLASSIFICATION:
      return getMaxClassification();

    case NETWORK_INITIATED:
      return getNetworkInitiated();

    case PHYSICAL_SERVERS:
      return getPhysicalServers();

    case DATE_ADDED:
      return getDateAdded();

    case DATA_TYPE:
      return getDataType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case FEED_NAME:
      return isSetFeedName();
    case DESCRIPTION:
      return isSetDescription();
    case BROADCAST_TOPICS:
      return isSetBroadcastTopics();
    case EXPORTING_SYSTEM:
      return isSetExportingSystem();
    case TYPE:
      return isSetType();
    case MAX_CLASSIFICATION:
      return isSetMaxClassification();
    case NETWORK_INITIATED:
      return isSetNetworkInitiated();
    case PHYSICAL_SERVERS:
      return isSetPhysicalServers();
    case DATE_ADDED:
      return isSetDateAdded();
    case DATA_TYPE:
      return isSetDataType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof FeedPipeline)
      return this.equals((FeedPipeline)that);
    return false;
  }

  public boolean equals(FeedPipeline that) {
    if (that == null)
      return false;

    boolean this_present_feedName = true && this.isSetFeedName();
    boolean that_present_feedName = true && that.isSetFeedName();
    if (this_present_feedName || that_present_feedName) {
      if (!(this_present_feedName && that_present_feedName))
        return false;
      if (!this.feedName.equals(that.feedName))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_broadcastTopics = true && this.isSetBroadcastTopics();
    boolean that_present_broadcastTopics = true && that.isSetBroadcastTopics();
    if (this_present_broadcastTopics || that_present_broadcastTopics) {
      if (!(this_present_broadcastTopics && that_present_broadcastTopics))
        return false;
      if (!this.broadcastTopics.equals(that.broadcastTopics))
        return false;
    }

    boolean this_present_exportingSystem = true && this.isSetExportingSystem();
    boolean that_present_exportingSystem = true && that.isSetExportingSystem();
    if (this_present_exportingSystem || that_present_exportingSystem) {
      if (!(this_present_exportingSystem && that_present_exportingSystem))
        return false;
      if (!this.exportingSystem.equals(that.exportingSystem))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_maxClassification = true && this.isSetMaxClassification();
    boolean that_present_maxClassification = true && that.isSetMaxClassification();
    if (this_present_maxClassification || that_present_maxClassification) {
      if (!(this_present_maxClassification && that_present_maxClassification))
        return false;
      if (!this.maxClassification.equals(that.maxClassification))
        return false;
    }

    boolean this_present_networkInitiated = true && this.isSetNetworkInitiated();
    boolean that_present_networkInitiated = true && that.isSetNetworkInitiated();
    if (this_present_networkInitiated || that_present_networkInitiated) {
      if (!(this_present_networkInitiated && that_present_networkInitiated))
        return false;
      if (!this.networkInitiated.equals(that.networkInitiated))
        return false;
    }

    boolean this_present_physicalServers = true && this.isSetPhysicalServers();
    boolean that_present_physicalServers = true && that.isSetPhysicalServers();
    if (this_present_physicalServers || that_present_physicalServers) {
      if (!(this_present_physicalServers && that_present_physicalServers))
        return false;
      if (!this.physicalServers.equals(that.physicalServers))
        return false;
    }

    boolean this_present_dateAdded = true && this.isSetDateAdded();
    boolean that_present_dateAdded = true && that.isSetDateAdded();
    if (this_present_dateAdded || that_present_dateAdded) {
      if (!(this_present_dateAdded && that_present_dateAdded))
        return false;
      if (!this.dateAdded.equals(that.dateAdded))
        return false;
    }

    boolean this_present_dataType = true && this.isSetDataType();
    boolean that_present_dataType = true && that.isSetDataType();
    if (this_present_dataType || that_present_dataType) {
      if (!(this_present_dataType && that_present_dataType))
        return false;
      if (!this.dataType.equals(that.dataType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(FeedPipeline other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetFeedName()).compareTo(other.isSetFeedName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFeedName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.feedName, other.feedName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBroadcastTopics()).compareTo(other.isSetBroadcastTopics());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBroadcastTopics()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.broadcastTopics, other.broadcastTopics);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExportingSystem()).compareTo(other.isSetExportingSystem());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExportingSystem()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exportingSystem, other.exportingSystem);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxClassification()).compareTo(other.isSetMaxClassification());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxClassification()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxClassification, other.maxClassification);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNetworkInitiated()).compareTo(other.isSetNetworkInitiated());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNetworkInitiated()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.networkInitiated, other.networkInitiated);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPhysicalServers()).compareTo(other.isSetPhysicalServers());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhysicalServers()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.physicalServers, other.physicalServers);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDateAdded()).compareTo(other.isSetDateAdded());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDateAdded()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dateAdded, other.dateAdded);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataType()).compareTo(other.isSetDataType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataType, other.dataType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("FeedPipeline(");
    boolean first = true;

    if (isSetFeedName()) {
      sb.append("feedName:");
      if (this.feedName == null) {
        sb.append("null");
      } else {
        sb.append(this.feedName);
      }
      first = false;
    }
    if (isSetDescription()) {
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
    }
    if (isSetBroadcastTopics()) {
      if (!first) sb.append(", ");
      sb.append("broadcastTopics:");
      if (this.broadcastTopics == null) {
        sb.append("null");
      } else {
        sb.append(this.broadcastTopics);
      }
      first = false;
    }
    if (isSetExportingSystem()) {
      if (!first) sb.append(", ");
      sb.append("exportingSystem:");
      if (this.exportingSystem == null) {
        sb.append("null");
      } else {
        sb.append(this.exportingSystem);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    if (isSetMaxClassification()) {
      if (!first) sb.append(", ");
      sb.append("maxClassification:");
      if (this.maxClassification == null) {
        sb.append("null");
      } else {
        sb.append(this.maxClassification);
      }
      first = false;
    }
    if (isSetNetworkInitiated()) {
      if (!first) sb.append(", ");
      sb.append("networkInitiated:");
      if (this.networkInitiated == null) {
        sb.append("null");
      } else {
        sb.append(this.networkInitiated);
      }
      first = false;
    }
    if (isSetPhysicalServers()) {
      if (!first) sb.append(", ");
      sb.append("physicalServers:");
      if (this.physicalServers == null) {
        sb.append("null");
      } else {
        sb.append(this.physicalServers);
      }
      first = false;
    }
    if (isSetDateAdded()) {
      if (!first) sb.append(", ");
      sb.append("dateAdded:");
      if (this.dateAdded == null) {
        sb.append("null");
      } else {
        sb.append(this.dateAdded);
      }
      first = false;
    }
    if (isSetDataType()) {
      if (!first) sb.append(", ");
      sb.append("dataType:");
      if (this.dataType == null) {
        sb.append("null");
      } else {
        sb.append(this.dataType);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class FeedPipelineStandardSchemeFactory implements SchemeFactory {
    public FeedPipelineStandardScheme getScheme() {
      return new FeedPipelineStandardScheme();
    }
  }

  private static class FeedPipelineStandardScheme extends StandardScheme<FeedPipeline> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, FeedPipeline struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // FEED_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.feedName = iprot.readString();
              struct.setFeedNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // BROADCAST_TOPICS
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.broadcastTopics = new HashSet<BroadcastTopic>(2*_set0.size);
                for (int _i1 = 0; _i1 < _set0.size; ++_i1)
                {
                  BroadcastTopic _elem2;
                  _elem2 = new BroadcastTopic();
                  _elem2.read(iprot);
                  struct.broadcastTopics.add(_elem2);
                }
                iprot.readSetEnd();
              }
              struct.setBroadcastTopicsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EXPORTING_SYSTEM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.exportingSystem = iprot.readString();
              struct.setExportingSystemIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.type = iprot.readString();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_CLASSIFICATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.maxClassification = iprot.readString();
              struct.setMaxClassificationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NETWORK_INITIATED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.networkInitiated = iprot.readString();
              struct.setNetworkInitiatedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PHYSICAL_SERVERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list3 = iprot.readListBegin();
                struct.physicalServers = new ArrayList<String>(_list3.size);
                for (int _i4 = 0; _i4 < _list3.size; ++_i4)
                {
                  String _elem5;
                  _elem5 = iprot.readString();
                  struct.physicalServers.add(_elem5);
                }
                iprot.readListEnd();
              }
              struct.setPhysicalServersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DATE_ADDED
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dateAdded = iprot.readString();
              struct.setDateAddedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DATA_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataType = iprot.readString();
              struct.setDataTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, FeedPipeline struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.feedName != null) {
        if (struct.isSetFeedName()) {
          oprot.writeFieldBegin(FEED_NAME_FIELD_DESC);
          oprot.writeString(struct.feedName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.description != null) {
        if (struct.isSetDescription()) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
      }
      if (struct.broadcastTopics != null) {
        if (struct.isSetBroadcastTopics()) {
          oprot.writeFieldBegin(BROADCAST_TOPICS_FIELD_DESC);
          {
            oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.broadcastTopics.size()));
            for (BroadcastTopic _iter6 : struct.broadcastTopics)
            {
              _iter6.write(oprot);
            }
            oprot.writeSetEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.exportingSystem != null) {
        if (struct.isSetExportingSystem()) {
          oprot.writeFieldBegin(EXPORTING_SYSTEM_FIELD_DESC);
          oprot.writeString(struct.exportingSystem);
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeString(struct.type);
          oprot.writeFieldEnd();
        }
      }
      if (struct.maxClassification != null) {
        if (struct.isSetMaxClassification()) {
          oprot.writeFieldBegin(MAX_CLASSIFICATION_FIELD_DESC);
          oprot.writeString(struct.maxClassification);
          oprot.writeFieldEnd();
        }
      }
      if (struct.networkInitiated != null) {
        if (struct.isSetNetworkInitiated()) {
          oprot.writeFieldBegin(NETWORK_INITIATED_FIELD_DESC);
          oprot.writeString(struct.networkInitiated);
          oprot.writeFieldEnd();
        }
      }
      if (struct.physicalServers != null) {
        if (struct.isSetPhysicalServers()) {
          oprot.writeFieldBegin(PHYSICAL_SERVERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.physicalServers.size()));
            for (String _iter7 : struct.physicalServers)
            {
              oprot.writeString(_iter7);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.dateAdded != null) {
        if (struct.isSetDateAdded()) {
          oprot.writeFieldBegin(DATE_ADDED_FIELD_DESC);
          oprot.writeString(struct.dateAdded);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dataType != null) {
        if (struct.isSetDataType()) {
          oprot.writeFieldBegin(DATA_TYPE_FIELD_DESC);
          oprot.writeString(struct.dataType);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class FeedPipelineTupleSchemeFactory implements SchemeFactory {
    public FeedPipelineTupleScheme getScheme() {
      return new FeedPipelineTupleScheme();
    }
  }

  private static class FeedPipelineTupleScheme extends TupleScheme<FeedPipeline> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, FeedPipeline struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetFeedName()) {
        optionals.set(0);
      }
      if (struct.isSetDescription()) {
        optionals.set(1);
      }
      if (struct.isSetBroadcastTopics()) {
        optionals.set(2);
      }
      if (struct.isSetExportingSystem()) {
        optionals.set(3);
      }
      if (struct.isSetType()) {
        optionals.set(4);
      }
      if (struct.isSetMaxClassification()) {
        optionals.set(5);
      }
      if (struct.isSetNetworkInitiated()) {
        optionals.set(6);
      }
      if (struct.isSetPhysicalServers()) {
        optionals.set(7);
      }
      if (struct.isSetDateAdded()) {
        optionals.set(8);
      }
      if (struct.isSetDataType()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetFeedName()) {
        oprot.writeString(struct.feedName);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetBroadcastTopics()) {
        {
          oprot.writeI32(struct.broadcastTopics.size());
          for (BroadcastTopic _iter8 : struct.broadcastTopics)
          {
            _iter8.write(oprot);
          }
        }
      }
      if (struct.isSetExportingSystem()) {
        oprot.writeString(struct.exportingSystem);
      }
      if (struct.isSetType()) {
        oprot.writeString(struct.type);
      }
      if (struct.isSetMaxClassification()) {
        oprot.writeString(struct.maxClassification);
      }
      if (struct.isSetNetworkInitiated()) {
        oprot.writeString(struct.networkInitiated);
      }
      if (struct.isSetPhysicalServers()) {
        {
          oprot.writeI32(struct.physicalServers.size());
          for (String _iter9 : struct.physicalServers)
          {
            oprot.writeString(_iter9);
          }
        }
      }
      if (struct.isSetDateAdded()) {
        oprot.writeString(struct.dateAdded);
      }
      if (struct.isSetDataType()) {
        oprot.writeString(struct.dataType);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, FeedPipeline struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.feedName = iprot.readString();
        struct.setFeedNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TSet _set10 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.broadcastTopics = new HashSet<BroadcastTopic>(2*_set10.size);
          for (int _i11 = 0; _i11 < _set10.size; ++_i11)
          {
            BroadcastTopic _elem12;
            _elem12 = new BroadcastTopic();
            _elem12.read(iprot);
            struct.broadcastTopics.add(_elem12);
          }
        }
        struct.setBroadcastTopicsIsSet(true);
      }
      if (incoming.get(3)) {
        struct.exportingSystem = iprot.readString();
        struct.setExportingSystemIsSet(true);
      }
      if (incoming.get(4)) {
        struct.type = iprot.readString();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.maxClassification = iprot.readString();
        struct.setMaxClassificationIsSet(true);
      }
      if (incoming.get(6)) {
        struct.networkInitiated = iprot.readString();
        struct.setNetworkInitiatedIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.physicalServers = new ArrayList<String>(_list13.size);
          for (int _i14 = 0; _i14 < _list13.size; ++_i14)
          {
            String _elem15;
            _elem15 = iprot.readString();
            struct.physicalServers.add(_elem15);
          }
        }
        struct.setPhysicalServersIsSet(true);
      }
      if (incoming.get(8)) {
        struct.dateAdded = iprot.readString();
        struct.setDateAddedIsSet(true);
      }
      if (incoming.get(9)) {
        struct.dataType = iprot.readString();
        struct.setDataTypeIsSet(true);
      }
    }
  }

}

