/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.ins.thrift.gen;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class ApplicationSummary implements org.apache.thrift.TBase<ApplicationSummary, ApplicationSummary._Fields>, java.io.Serializable, Cloneable, Comparable<ApplicationSummary> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ApplicationSummary");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("appName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField POC_FIELD_DESC = new org.apache.thrift.protocol.TField("poc", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APP_ICON_SRC_FIELD_DESC = new org.apache.thrift.protocol.TField("appIconSrc", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SPONSORING_ORGANIZATION_FIELD_DESC = new org.apache.thrift.protocol.TField("sponsoringOrganization", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField EXTERNAL_URI_FIELD_DESC = new org.apache.thrift.protocol.TField("externalUri", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ApplicationSummaryStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ApplicationSummaryTupleSchemeFactory());
  }

  public String id; // optional
  public String appName; // optional
  public String poc; // optional
  public String appIconSrc; // optional
  public String sponsoringOrganization; // optional
  public String externalUri; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    APP_NAME((short)2, "appName"),
    POC((short)3, "poc"),
    APP_ICON_SRC((short)4, "appIconSrc"),
    SPONSORING_ORGANIZATION((short)5, "sponsoringOrganization"),
    EXTERNAL_URI((short)6, "externalUri");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // APP_NAME
          return APP_NAME;
        case 3: // POC
          return POC;
        case 4: // APP_ICON_SRC
          return APP_ICON_SRC;
        case 5: // SPONSORING_ORGANIZATION
          return SPONSORING_ORGANIZATION;
        case 6: // EXTERNAL_URI
          return EXTERNAL_URI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.ID,_Fields.APP_NAME,_Fields.POC,_Fields.APP_ICON_SRC,_Fields.SPONSORING_ORGANIZATION,_Fields.EXTERNAL_URI};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_NAME, new org.apache.thrift.meta_data.FieldMetaData("appName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POC, new org.apache.thrift.meta_data.FieldMetaData("poc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APP_ICON_SRC, new org.apache.thrift.meta_data.FieldMetaData("appIconSrc", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SPONSORING_ORGANIZATION, new org.apache.thrift.meta_data.FieldMetaData("sponsoringOrganization", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXTERNAL_URI, new org.apache.thrift.meta_data.FieldMetaData("externalUri", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ApplicationSummary.class, metaDataMap);
  }

  public ApplicationSummary() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ApplicationSummary(ApplicationSummary other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetAppName()) {
      this.appName = other.appName;
    }
    if (other.isSetPoc()) {
      this.poc = other.poc;
    }
    if (other.isSetAppIconSrc()) {
      this.appIconSrc = other.appIconSrc;
    }
    if (other.isSetSponsoringOrganization()) {
      this.sponsoringOrganization = other.sponsoringOrganization;
    }
    if (other.isSetExternalUri()) {
      this.externalUri = other.externalUri;
    }
  }

  public ApplicationSummary deepCopy() {
    return new ApplicationSummary(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.appName = null;
    this.poc = null;
    this.appIconSrc = null;
    this.sponsoringOrganization = null;
    this.externalUri = null;
  }

  public String getId() {
    return this.id;
  }

  public ApplicationSummary setId(String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public String getAppName() {
    return this.appName;
  }

  public ApplicationSummary setAppName(String appName) {
    this.appName = appName;
    return this;
  }

  public void unsetAppName() {
    this.appName = null;
  }

  /** Returns true if field appName is set (has been assigned a value) and false otherwise */
  public boolean isSetAppName() {
    return this.appName != null;
  }

  public void setAppNameIsSet(boolean value) {
    if (!value) {
      this.appName = null;
    }
  }

  public String getPoc() {
    return this.poc;
  }

  public ApplicationSummary setPoc(String poc) {
    this.poc = poc;
    return this;
  }

  public void unsetPoc() {
    this.poc = null;
  }

  /** Returns true if field poc is set (has been assigned a value) and false otherwise */
  public boolean isSetPoc() {
    return this.poc != null;
  }

  public void setPocIsSet(boolean value) {
    if (!value) {
      this.poc = null;
    }
  }

  public String getAppIconSrc() {
    return this.appIconSrc;
  }

  public ApplicationSummary setAppIconSrc(String appIconSrc) {
    this.appIconSrc = appIconSrc;
    return this;
  }

  public void unsetAppIconSrc() {
    this.appIconSrc = null;
  }

  /** Returns true if field appIconSrc is set (has been assigned a value) and false otherwise */
  public boolean isSetAppIconSrc() {
    return this.appIconSrc != null;
  }

  public void setAppIconSrcIsSet(boolean value) {
    if (!value) {
      this.appIconSrc = null;
    }
  }

  public String getSponsoringOrganization() {
    return this.sponsoringOrganization;
  }

  public ApplicationSummary setSponsoringOrganization(String sponsoringOrganization) {
    this.sponsoringOrganization = sponsoringOrganization;
    return this;
  }

  public void unsetSponsoringOrganization() {
    this.sponsoringOrganization = null;
  }

  /** Returns true if field sponsoringOrganization is set (has been assigned a value) and false otherwise */
  public boolean isSetSponsoringOrganization() {
    return this.sponsoringOrganization != null;
  }

  public void setSponsoringOrganizationIsSet(boolean value) {
    if (!value) {
      this.sponsoringOrganization = null;
    }
  }

  public String getExternalUri() {
    return this.externalUri;
  }

  public ApplicationSummary setExternalUri(String externalUri) {
    this.externalUri = externalUri;
    return this;
  }

  public void unsetExternalUri() {
    this.externalUri = null;
  }

  /** Returns true if field externalUri is set (has been assigned a value) and false otherwise */
  public boolean isSetExternalUri() {
    return this.externalUri != null;
  }

  public void setExternalUriIsSet(boolean value) {
    if (!value) {
      this.externalUri = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((String)value);
      }
      break;

    case APP_NAME:
      if (value == null) {
        unsetAppName();
      } else {
        setAppName((String)value);
      }
      break;

    case POC:
      if (value == null) {
        unsetPoc();
      } else {
        setPoc((String)value);
      }
      break;

    case APP_ICON_SRC:
      if (value == null) {
        unsetAppIconSrc();
      } else {
        setAppIconSrc((String)value);
      }
      break;

    case SPONSORING_ORGANIZATION:
      if (value == null) {
        unsetSponsoringOrganization();
      } else {
        setSponsoringOrganization((String)value);
      }
      break;

    case EXTERNAL_URI:
      if (value == null) {
        unsetExternalUri();
      } else {
        setExternalUri((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case APP_NAME:
      return getAppName();

    case POC:
      return getPoc();

    case APP_ICON_SRC:
      return getAppIconSrc();

    case SPONSORING_ORGANIZATION:
      return getSponsoringOrganization();

    case EXTERNAL_URI:
      return getExternalUri();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case APP_NAME:
      return isSetAppName();
    case POC:
      return isSetPoc();
    case APP_ICON_SRC:
      return isSetAppIconSrc();
    case SPONSORING_ORGANIZATION:
      return isSetSponsoringOrganization();
    case EXTERNAL_URI:
      return isSetExternalUri();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ApplicationSummary)
      return this.equals((ApplicationSummary)that);
    return false;
  }

  public boolean equals(ApplicationSummary that) {
    if (that == null)
      return false;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_appName = true && this.isSetAppName();
    boolean that_present_appName = true && that.isSetAppName();
    if (this_present_appName || that_present_appName) {
      if (!(this_present_appName && that_present_appName))
        return false;
      if (!this.appName.equals(that.appName))
        return false;
    }

    boolean this_present_poc = true && this.isSetPoc();
    boolean that_present_poc = true && that.isSetPoc();
    if (this_present_poc || that_present_poc) {
      if (!(this_present_poc && that_present_poc))
        return false;
      if (!this.poc.equals(that.poc))
        return false;
    }

    boolean this_present_appIconSrc = true && this.isSetAppIconSrc();
    boolean that_present_appIconSrc = true && that.isSetAppIconSrc();
    if (this_present_appIconSrc || that_present_appIconSrc) {
      if (!(this_present_appIconSrc && that_present_appIconSrc))
        return false;
      if (!this.appIconSrc.equals(that.appIconSrc))
        return false;
    }

    boolean this_present_sponsoringOrganization = true && this.isSetSponsoringOrganization();
    boolean that_present_sponsoringOrganization = true && that.isSetSponsoringOrganization();
    if (this_present_sponsoringOrganization || that_present_sponsoringOrganization) {
      if (!(this_present_sponsoringOrganization && that_present_sponsoringOrganization))
        return false;
      if (!this.sponsoringOrganization.equals(that.sponsoringOrganization))
        return false;
    }

    boolean this_present_externalUri = true && this.isSetExternalUri();
    boolean that_present_externalUri = true && that.isSetExternalUri();
    if (this_present_externalUri || that_present_externalUri) {
      if (!(this_present_externalUri && that_present_externalUri))
        return false;
      if (!this.externalUri.equals(that.externalUri))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(ApplicationSummary other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppName()).compareTo(other.isSetAppName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appName, other.appName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPoc()).compareTo(other.isSetPoc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPoc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.poc, other.poc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAppIconSrc()).compareTo(other.isSetAppIconSrc());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAppIconSrc()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.appIconSrc, other.appIconSrc);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSponsoringOrganization()).compareTo(other.isSetSponsoringOrganization());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSponsoringOrganization()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sponsoringOrganization, other.sponsoringOrganization);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExternalUri()).compareTo(other.isSetExternalUri());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExternalUri()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.externalUri, other.externalUri);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ApplicationSummary(");
    boolean first = true;

    if (isSetId()) {
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
    }
    if (isSetAppName()) {
      if (!first) sb.append(", ");
      sb.append("appName:");
      if (this.appName == null) {
        sb.append("null");
      } else {
        sb.append(this.appName);
      }
      first = false;
    }
    if (isSetPoc()) {
      if (!first) sb.append(", ");
      sb.append("poc:");
      if (this.poc == null) {
        sb.append("null");
      } else {
        sb.append(this.poc);
      }
      first = false;
    }
    if (isSetAppIconSrc()) {
      if (!first) sb.append(", ");
      sb.append("appIconSrc:");
      if (this.appIconSrc == null) {
        sb.append("null");
      } else {
        sb.append(this.appIconSrc);
      }
      first = false;
    }
    if (isSetSponsoringOrganization()) {
      if (!first) sb.append(", ");
      sb.append("sponsoringOrganization:");
      if (this.sponsoringOrganization == null) {
        sb.append("null");
      } else {
        sb.append(this.sponsoringOrganization);
      }
      first = false;
    }
    if (isSetExternalUri()) {
      if (!first) sb.append(", ");
      sb.append("externalUri:");
      if (this.externalUri == null) {
        sb.append("null");
      } else {
        sb.append(this.externalUri);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ApplicationSummaryStandardSchemeFactory implements SchemeFactory {
    public ApplicationSummaryStandardScheme getScheme() {
      return new ApplicationSummaryStandardScheme();
    }
  }

  private static class ApplicationSummaryStandardScheme extends StandardScheme<ApplicationSummary> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ApplicationSummary struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appName = iprot.readString();
              struct.setAppNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // POC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.poc = iprot.readString();
              struct.setPocIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APP_ICON_SRC
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.appIconSrc = iprot.readString();
              struct.setAppIconSrcIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SPONSORING_ORGANIZATION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.sponsoringOrganization = iprot.readString();
              struct.setSponsoringOrganizationIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // EXTERNAL_URI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.externalUri = iprot.readString();
              struct.setExternalUriIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ApplicationSummary struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        if (struct.isSetId()) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          oprot.writeString(struct.id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appName != null) {
        if (struct.isSetAppName()) {
          oprot.writeFieldBegin(APP_NAME_FIELD_DESC);
          oprot.writeString(struct.appName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.poc != null) {
        if (struct.isSetPoc()) {
          oprot.writeFieldBegin(POC_FIELD_DESC);
          oprot.writeString(struct.poc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.appIconSrc != null) {
        if (struct.isSetAppIconSrc()) {
          oprot.writeFieldBegin(APP_ICON_SRC_FIELD_DESC);
          oprot.writeString(struct.appIconSrc);
          oprot.writeFieldEnd();
        }
      }
      if (struct.sponsoringOrganization != null) {
        if (struct.isSetSponsoringOrganization()) {
          oprot.writeFieldBegin(SPONSORING_ORGANIZATION_FIELD_DESC);
          oprot.writeString(struct.sponsoringOrganization);
          oprot.writeFieldEnd();
        }
      }
      if (struct.externalUri != null) {
        if (struct.isSetExternalUri()) {
          oprot.writeFieldBegin(EXTERNAL_URI_FIELD_DESC);
          oprot.writeString(struct.externalUri);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ApplicationSummaryTupleSchemeFactory implements SchemeFactory {
    public ApplicationSummaryTupleScheme getScheme() {
      return new ApplicationSummaryTupleScheme();
    }
  }

  private static class ApplicationSummaryTupleScheme extends TupleScheme<ApplicationSummary> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ApplicationSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetAppName()) {
        optionals.set(1);
      }
      if (struct.isSetPoc()) {
        optionals.set(2);
      }
      if (struct.isSetAppIconSrc()) {
        optionals.set(3);
      }
      if (struct.isSetSponsoringOrganization()) {
        optionals.set(4);
      }
      if (struct.isSetExternalUri()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetAppName()) {
        oprot.writeString(struct.appName);
      }
      if (struct.isSetPoc()) {
        oprot.writeString(struct.poc);
      }
      if (struct.isSetAppIconSrc()) {
        oprot.writeString(struct.appIconSrc);
      }
      if (struct.isSetSponsoringOrganization()) {
        oprot.writeString(struct.sponsoringOrganization);
      }
      if (struct.isSetExternalUri()) {
        oprot.writeString(struct.externalUri);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ApplicationSummary struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.appName = iprot.readString();
        struct.setAppNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.poc = iprot.readString();
        struct.setPocIsSet(true);
      }
      if (incoming.get(3)) {
        struct.appIconSrc = iprot.readString();
        struct.setAppIconSrcIsSet(true);
      }
      if (incoming.get(4)) {
        struct.sponsoringOrganization = iprot.readString();
        struct.setSponsoringOrganizationIsSet(true);
      }
      if (incoming.get(5)) {
        struct.externalUri = iprot.readString();
        struct.setExternalUriIsSet(true);
      }
    }
  }

}

